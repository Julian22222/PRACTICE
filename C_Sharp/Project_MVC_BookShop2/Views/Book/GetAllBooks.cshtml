@inject Project_MVC_BookShop2.Repository.IBookTypeRepository _bookTypeRepository  //inject Interface


@{ //in this brackets we can use C# code
    ViewData["Title"] = "All books";
}

@* Book model class import connection , to use Book Model in --> @model IEnumerable<Book>  *@
@using Project_MVC_BookShop2.Models
@model IEnumerable<Book>  // using @model directive we import data from controller, that we pass in controller,(here we assign a data type to imported Model data from controller).
@* It can be any data type -IEnumerable (this is universal), List, Collection *@
@* <Book> <-- is a type of our model *@


<div class="container">
    <h1 class="d-flex justify-content-center">ðŸ“– All books</h1>
    <label for="search" class="form-label">Search by Book type</label>
    <select  id="sortOptions" class="form-select mb-3" aria-label="Default select example">

        <option selected value="">Sort books by type</option>
        @foreach( var item in await _bookTypeRepository.GetBookTypes()){
        <option value="@item.Id" >@item.TypeName</option> //all book types come from database
        }
    </select>    


    <hr class="mb-5"/>

    @if(Model.Any()) //checking if we have any data in our model
    {

    
        <div id="BookList" class="row">
            @foreach(var book in Model){  //looping through imported data model(IEnumerable<Book> <--data type for imported Model) from controller
            <div class="col-md-4">
                <partial name="_bookThumbnail" model="book"/>  
            </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            We don't have any books in our books shop for now, add first book.
        </div>
    }









    @* <div class="row">
        @foreach(var book in Model){  //looping through imported data model(IEnumerable<Book> <--data type for imported Model) from controller
        <div class="col-md-4">
            <partial name="_bookThumbnail" model="book"/>   *@
            @* passing data to our partial View file --> model="book" *@
            @* model attribute helps to pass the data *@



            @* #IF WE DONT USE PARTIAL VIEW , WE WRITE THIS CODE --> *@
            @* <div class="card mb-4 shadow-sm">

            #this example for one image for all books -->
            <img src="https://img-b.udemycdn.com/course/750x422/4715176_8391.jpg" alt="logo">



            #this example --> image will be diffrent, photo from uploaded image
            <img src="@book.CoverImageUrl" alt="image logo" class="img-thumbnail" />
            <div class="card-body">


            #accessing book title-->
            <h3 class="card-title">@book.Title</h3>


            #accessing book Description-->
            <p class="card-text">@book.Description</p>


            <div class="d-flex justify-content-between align-items-center">
                <div class="btn-group">
                    #accessing book Id by clicking on each card -->
                    <a href="/book/getbook/@book.Id" class="btn btn-sm btn-outline-secondary">View details</a>   or other option to write-->
                    <a asp-controller="book" asp-action="getbook" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary">View details</a>
                </div>
                #accessing book Author -->
                <small class="text-muted">@book.Author</small>
                </div>
                </div>
            </div> *@
        @* </div>
        }
    </div> *@
</div>


@section Scripts{
<script>
    //This script enables live sorting of books without a full page reload

    //Now you need to add a jQuery function that listens for a change on the dropdown and triggers a request to the controller to sort the list accordingly.
    $(document).ready(function () {
        $('#sortOptions').change(function () {  //Dropdown Change Event,ttaches a change event listener to the <select> element with ID sortOptions. This function will run every time the user selects a new option from the dropdown.
        var selectedOption = $(this).val(); // Get selected value from dropdown option

        console.log(selectedOption); // Check the selected option in the console


        // Check if the selected option is empty (i.e., no option is selected)
        //Handle Empty Selection (Reset Filter)
        if(!selectedOption){
            // If no option is selected, redirect to the GetAllBooks action in the BookController, when selectedOption == ""; (SHOW all books)
            window.location.href = '@Url.Action("GetAllBooks", "Book")';
            return;
        }

         // Trigger an AJAX call to the controller with the selected option
        $.ajax({
            //Sets the endpoint URL for the AJAX request by generating the URL for the GetSortedBooksPartial action in the BookController
            url: '@Url.Action("GetSortedBooksPartial", "Book")', // Since the sorting logic is in BookController, you should use:Book and action: GetSortedBooksPartial
            type: 'GET',
            data: { sortOption: selectedOption },  //Sends the selected book type ID as a query string parameter named sortOption to the controller.
            success: function (data) { // If the AJAX call is successful, this function will run, sorted data is returned from the server(from BookContoller GetSortedBooksPartial method) and passed to the - data parameter.)
                // Update your #BookList element with the sorted data (e.g. replace book list content)
                $('#BookList').html(data); // Returning the HTML of books and insert it in #BookList element. Replaces the existing book list content in the #BookList element with the newly returned sorted content.
            },
            error: function (xhr, status, error) {
                alert("Error during sorting elements.");  //If the AJAX call fails (e.g., server error, network issue), this displays an alert to the user.
            //error callback function in jQueryâ€™s $.ajax() method. It is executed only when the AJAX request fails â€” i.e., the browser doesnâ€™t receive a valid success response from the server.
            //parametr(xhr) - 	The XMLHttpRequest object â€” contains detailed info about the request and response. You can inspect xhr.status or xhr.responseText to get more debugging info.
            //parametr(status) -  A string describing the type of error that occurred. Possible values: "timeout", "error", "abort", "parsererror".
            //parametr(error) -  A string describing the error that occurred. This is usually a human-readable string.
            //Examples of Triggering This Callback:The action method (GetSortedBooksPartial) throws an unhandled exception, The controller returns an HTTP status like 500, 404, or 403, The server is unreachable or down, The returned data isn't valid HTML or JSON (depending on what you're expecting), CORS or security issues (rare in same-origin setups).
            
            //error: function (xhr, status, error) {
            //console.log("XHR status code:", xhr.status);
            //console.log("Response text:", xhr.responseText);
            //console.log("Status:", status);
            //console.log("Error thrown:", error);
            //alert("Error during sorting elements.");
            //}

            //This will help you understand why the AJAX call failed by checking:
            //xhr.status: HTTP status code (like 500 or 404)
            //xhr.responseText: any error message returned from the server
            }
        });
        });
    });

</script>
}