@inject Project_MVC_BookShop2.Repository.IBookTypeRepository _bookTypeRepository  //inject Interface


@{ //in this brackets we can use C# code
    ViewData["Title"] = "All books";
}

@* Book model class import connection , to use Book Model in --> @model IEnumerable<Book>  *@
@using Project_MVC_BookShop2.Models
@model IEnumerable<Book>  // using @model directive we import data from controller, that we pass in controller,(here we assign a data type to imported Model data from controller).
@* It can be any data type -IEnumerable (this is universal), List, Collection *@
@* <Book> <-- is a type of our model *@


<div class="container">
    <h1 class="d-flex justify-content-center">ðŸ“– All books</h1>
    <label for="search" class="form-label">Search by Book type</label>
    <select  id="sortOptions" class="form-select mb-3" aria-label="Default select example">

        <option selected value="">Sort books by type</option>
        @foreach( var item in await _bookTypeRepository.GetBookTypes()){
        <option value="@item.Id">@item.TypeName</option> //all book types come from database
        }
    </select>    


    <hr class="mb-5"/>

    @if(Model.Any()) //checking if we have any data in our model
    {
        <div id="BookList" class="row">
            @foreach(var book in Model){  //looping through imported data model(IEnumerable<Book> <--data type for imported Model) from controller
            <div class="col-md-4">
                <partial name="_bookThumbnail" model="book"/>  
            </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            We don't have any books in our books shop for now, add first book.
        </div>
    }









    @* <div class="row">
        @foreach(var book in Model){  //looping through imported data model(IEnumerable<Book> <--data type for imported Model) from controller
        <div class="col-md-4">
            <partial name="_bookThumbnail" model="book"/>   *@
            @* passing data to our partial View file --> model="book" *@
            @* model attribute helps to pass the data *@



            @* #IF WE DONT USE PARTIAL VIEW , WE WRITE THIS CODE --> *@
            @* <div class="card mb-4 shadow-sm">

            #this example for one image for all books -->
            <img src="https://img-b.udemycdn.com/course/750x422/4715176_8391.jpg" alt="logo">



            #this example --> image will be diffrent, photo from uploaded image
            <img src="@book.CoverImageUrl" alt="image logo" class="img-thumbnail" />
            <div class="card-body">


            #accessing book title-->
            <h3 class="card-title">@book.Title</h3>


            #accessing book Description-->
            <p class="card-text">@book.Description</p>


            <div class="d-flex justify-content-between align-items-center">
                <div class="btn-group">
                    #accessing book Id by clicking on each card -->
                    <a href="/book/getbook/@book.Id" class="btn btn-sm btn-outline-secondary">View details</a>   or other option to write-->
                    <a asp-controller="book" asp-action="getbook" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary">View details</a>
                </div>
                #accessing book Author -->
                <small class="text-muted">@book.Author</small>
                </div>
                </div>
            </div> *@
        @* </div>
        }
    </div> *@
</div>


@section Scripts{
<script>

    //Now you need to add a jQuery function that listens for a change on the dropdown and triggers a request to the controller to sort the list accordingly.
    $(document).ready(function () {
        $('#sortOptions').change(function () {
        var selectedOption = $(this).val(); // Get selected option value


         // Trigger an AJAX call to the controller with the selected option
        $.ajax({
            url: '@Url.Action("SortList", "Home")', // Change "Home" to your controller name
            type: 'GET',
            data: { sortOption: selectedOption },
            success: function (data) {
                // Update your table with the sorted data (e.g. replace book list content)
                $('#BookList').html(data);
            },
            error: function (xhr, status, error) {
                alert("Error during sorting elements.");
            }
        });
        });
    });

</script>
}