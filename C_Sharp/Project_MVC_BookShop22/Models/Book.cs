// using System.IO;
// using System.Security.AccessControl;
using System;   //using the System library in your project.Which gives you some useful classes like Console or functions/methods like WriteLine-> Console.WriteLine("Hello World!");
using System.Collections.Generic;
using System.Linq;  //querying any type of data source
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;   //to use server side validations attributes (or Model validation)
using System.ComponentModel.DataAnnotations.Schema;  //<--if use this --> [Column(TypeName = "decima(18,2)")]
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;    //to use IFormFile (special data type to hold information about uploaded files), allow to upload any file to our app, used in Model class


namespace Project_MVC_BookShop2.Models
{
    public class Book
    {
        //[DataType(DataType.EmailAddress)]
        // [DataType(DataType.Date)] //assign specific type for a field(Password,Date,DateTime, Currency, EmailAddress,CreditCard, PhoneNumber,Time,Upload and others, some attributes are not working in MVC)
        // [Display(Name ="Date")]
        // [EmailAddress] <-- to validate to be an email
        // public string MyField{get;set;}

    
        // unique identifier, using Guid property for Id
        // public Guid Id { get; set; }


        // [Range(0, 999.99, ErrorMessage = "Price Should be between 0 and 999.99")]
        // public decimal Price { get; set; }


        //[Range(0, 999.99)]
        //public decimal Price { get; set; }  //<-- it is better avoid decimal, coz will cause weird rounding issues ,(in example -->if work with money)

        // [RegularExpression(@"regularExpression here", ErrorMessage ="Password is not valid")]

        // [StringLength(8, ErrorMessage = "{0} length must be between {2} and {1}.", MinimumLength = 6)]
        //public string Name {get; set;}   //{0} <-- property name == Name

        //[StringLength(8, ErrorMessage = "{0} length must be between {2} and {1}.", MinimumLength = 6)]
        //When applied to a Name property, the error message created by the preceding code would be "Name length must be between 6 and 8."

        //[StringLength(50, MinimumLength = 3, ErrorMessage = "Full Name must be between 3 and 50 chars")]

        //[Column(TypeName = "decima(18,2)")]   //<-- it is better avoid decimal, coz will cause weird rounding issues ,(in example -->if work with money)


        //Database - automaticaly add an id as an identity column,don;t need to pass the value, it will creare it automatically.
        //_context.SaveChanges(); // The Id will be automatically generated by the database
        //The [Key] attribute is simply used to mark the property as the primary key in the database (for Entity Framework or other ORMs) and helps identify it as the unique identifier for that entity. However, it does not handle the auto-generation of values.
        //To auto-generate the Id, you need to rely on the underlying database mechanism (like SQL Server's identity column) or manually assign the Id value in your code. When you're working with an ORM like Entity Framework, you can let the database handle the auto-increment of the Id when saving the entity to the database
        // [Key] //create a Primary Key 
        public int Id { get; set; }

        // this is server side validation attributes(or model validation)
        [StringLength(100,MinimumLength =2)]  //max length= 100, and min length =5
        //[StringLength(100)]  <-- max length is 100 , minimum is 0
        //[StringLength(100, ErrorMessage ="Please put no more than 100 characters")] <--Costom erroe message specific for this atribute
        [Required(ErrorMessage = "Please enter the title of you book")] //mandatory field to field, custom msg if the field is not valid
        public string Title { get; set; }


        [Required] //mandatory field to field
        public string Author { get; set; } = "";

        // [MaxLength(100)]  <--max length, different syntax
        //[Required, MaxLength(100)]  <-- we can join the attributes together
        public string Description { get; set; }
        public string Category { get; set; }

        [Display(Name = "Book Type")]
        public int BookTypeId { get; set; }  //store Id of our booktype

        public string? BookTypeModel { get; set; }

        
        [Required(ErrorMessage = "Please enter the total pages")] //mandatory field to field, custom msg if the field is not valid
        [Display(Name ="Total pages of book")]  //to update the text,(TotalPages will be update on Total pages of book)


 // when you put -> ? -> this field is  - not Required
        public int? TotalPages { get; set; }



        // IFormFile - it is a special data type(it allow to create a property where we can upload the file), this property will hold all the details about uploaded files / Uploded image, img name(file Name)
        [Display(Name ="Choose the cover photo of your book")]
        // [Required] //<--mandatory field
         //CoverPhoto is optional property, because when we editing the book yo don't have to insert new Image for the book into the form
        public IFormFile? CoverPhoto { get; set; }

         //We don't have to create another property where we keep URL path to the correct image, we can --> in <img src="/books/cover/@book.CoverPhoto.FileName/>

        // uploaded image path, from wwwroot/books/cover + File name. We don't need full path --> serverFolder from BookController
        public string? CoverImageUrl {get; set;}


        
       
        
        // IFormFile - it is a special data type(it allow to create a property where we can upload the file), this property will hold all the details about uploaded files / img (file Name)
        [Display(Name ="Upload your book in pdf format")]
        // [Required]
        //BookPdf is optional property, because when we editing the book yo don't have to insert new PDF for the book into the form
        public IFormFile? BookPdf { get; set; }

        // uploaded image full path
        public string? BookPdfUrl {get; set;}


        // [Precision(16,2)]
        [Required]
        public decimal Price {get; set; }  //<-- it is better avoid decimal, coz will cause weird rounding issues ,(in example -->if work with money)
       

       public DateTime CreatedAt { get; set; }


        //public string Name {get; set;}= "Jack";    //<--assign a name by default

        // constructor
        // public Book()
        // {
            
        // }
        // prop + tab  --> quick btns for get,set
        //ctor + tab --> constructor


    }
}